/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lottoapp;

import lottoapp.commands.BlacklistCommandProcessor;
import lottoapp.commands.GameCommandProcessor;
import lottoapp.commands.ICommandProcessor;
import lottoapp.exception.BadCommandSyntaxException;
import lottoapp.logging.Logging;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

import static lottoapp.data.Storage.loadBlacklist;
import static lottoapp.logging.Logging.LOGGER;

public class App {
    // Constants

    /**
     * Blacklist containing integers that will not be returned with the games'
     * predictions
     */
    public static final List<Integer> BLACKLIST = new ArrayList<>();

    /**
     * Map for assigning the user-input command names to the distinct command
     * processor.
     */
    private static final Map<String, ICommandProcessor> CommandMap = new HashMap<>(
            Map.of(
                    "game", GameCommandProcessor.getInstance(),
                    "blacklist", BlacklistCommandProcessor.getInstance()));
    /**
     * Limit for the length of the blacklist
     */
    public static final int MAX_BLACKLIST = 6;

    /**
     * Entry point. Will try to parse the user input arguments, then goes into a loop until the user inputs 'exit' or closes the application.
     */
    public static void main(String[] args) {
        // Setup logger & create log file
        Logging.setupLogger();
        // Load blacklist from os if present
        loadBlacklist();
        // Enter input Loop
        try (BufferedReader userInput = new BufferedReader(new InputStreamReader(System.in))) {
            // Parse Inputs the first time
            boolean stop = parseCommand(args);

            while (!stop) {
                try {
                    outputInstructions();
                    String inputs = userInput.readLine();
                    if (inputs != null) {
                        stop = parseCommand(inputs.split(" "));
                    }
                } catch (BadCommandSyntaxException e) {
                    LOGGER.info("The user put in wrong syntax.");
                    LOGGER.info(e.getMessage());
                    System.out.println(e.getMessage());
                } catch (IllegalArgumentException e) {
                    LOGGER.info("The user has put in a bad argument:");
                    LOGGER.info(e.getMessage());
                    System.out.println(e.getMessage());
                }
            }
        } catch (IOException e) {
            LOGGER.severe("Failed trying to read user-inputs");
            LOGGER.severe(e.getMessage());
            System.out.println("An internal error occurred during initialization. Shutting down.");
        } catch (BadCommandSyntaxException e) {
            LOGGER.info("The user put in wrong syntax.");
            LOGGER.info(e.getMessage());
            System.out.println(e.getMessage());
        } catch (IllegalArgumentException e) {
            LOGGER.info("The user has put in a bad argument:");
            LOGGER.info(e.getMessage());
            System.out.println(e.getMessage());
        }

        LOGGER.info("Goodbye!");
        Logging.closeLogger();
    }

    /**
     * Parses the command from the given inputs. If not inputs are given, will fill in the default values ["game","lotto"].
     * @returns 'True' if the argument 'exit' has been parsed and the application should shut down. 'False' otherwise.
     */
    private static boolean parseCommand(String[] args) {
        LOGGER.info(String.format("Parsing %d arguments", args.length));
        if (args.length == 0 || args[0].equals("")) {
            args = new String[] { "game", "lotto" };
        }
        if (args[0].equals("exit")) {
            return true;
        }
        String commandName = args[0];
        if (CommandMap.containsKey(commandName)) {
            try {
                CommandMap.get(commandName).execute(Arrays.stream(args, 1, args.length).toArray(String[]::new));
            } catch (BadCommandSyntaxException e) {
                System.out.println(String.format("Wrong command syntax."));
                LOGGER.info(e.getMessage());
            }
        } else {
            LOGGER.info(String.format("User entered invalid command: '%s'", commandName));
            System.out.println(
                    String.format("Command with name '%s' was not found. Registered commands: %s", commandName,
                            Arrays.toString(CommandMap.keySet().toArray())));
        }
        return false;
    }

    private static void outputInstructions() {
        System.out.println("LottoApp usage: [command] [parameter1, parameter2, ...]");
        System.out.println("    commands: game, blacklist, exit");
        System.out.println("        game: 'game lotto' or  'game eurojackpot'");
        System.out.println(
                "        blacklist: 'blacklist add [number1, number2...]' or  'blacklist remove [number1, number2...]'");
    }
}
