/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lottoapp;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.FileHandler;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

import lottoapp.commands.BlacklistCommandProcessor;
import lottoapp.commands.GameCommandProcessor;
import lottoapp.commands.ICommandProcessor;

import static lottoapp.data.Storage.loadBlacklist;

public class App {
    // TODO: maybe remove utility functions from the main App class...
    public static final Logger LOGGER = Logger.getLogger(App.class.getName());
    private static final String LOG_DIR = "./logs/";
    public static final List<Integer> BLACKLIST = new ArrayList<>();

    private static final Map<String, ICommandProcessor> CommandMap = new HashMap<>(
            Map.of("game", GameCommandProcessor.getInstance(), "blacklist",
                    BlacklistCommandProcessor.getInstance()));
    public static final int MAX_BLACKLIST = 6;

    public static void main(String[] args) {
        // Setup logger & create log file
        setupLogger();
        // Load blacklist from os if present
        loadBlacklist();
        // Parse Inputs
        boolean stop = parseCommand(args);
        try (BufferedReader userInput = new BufferedReader(new InputStreamReader(System.in))) {
            while (!stop) {
                outputInstructions();
                String inputs = userInput.readLine();
                if(inputs != null){
                    stop = parseCommand(inputs.split(" "));
                }
            }
        } catch (IOException e) {
            // TODO: clever catch clause here
            e.printStackTrace();
        }
        LOGGER.info("Goodbye!");
        closeLogger();
    }

    private static boolean parseCommand(String[] args) {
        LOGGER.info(String.format("Parsing %d arguments", args.length));
        if (args.length == 0 || args[0].equals("")) {
            args = new String[] { "game", "lotto" };
        }
        if (args[0].equals("exit")) {
            return true;
        }
        String commandName = args[0];
        if (CommandMap.containsKey(commandName)) {
            try {
                CommandMap.get(commandName).execute(Arrays.stream(args, 1, args.length).toArray(String[]::new));
            } catch (IllegalArgumentException e) {
                System.out.println(String.format("Bad input: %s", e.getMessage()));
                outputInstructions();
            }
        } else {
            System.out.println(
                    String.format("Command with name '%s' was not found. Registered commands: %s", commandName,
                            Arrays.toString(CommandMap.keySet().toArray())));
        }
        return false;
    }

    private static void setupLogger() {
        // TODO: before shipping for production, remove logger output to console.
        Calendar now = Calendar.getInstance();

        String logPath = String.format("%s%4d-%02d-%02d_%02d-%02d-%02d.log", LOG_DIR, now.get(Calendar.YEAR),
                now.get(Calendar.MONTH) + 1, now.get(Calendar.DAY_OF_MONTH),
                now.get(Calendar.HOUR_OF_DAY), now.get(Calendar.MINUTE), now.get(Calendar.SECOND));
        try {
            new File(LOG_DIR).mkdirs();
            new File(logPath).createNewFile();
            FileHandler fh = new FileHandler(logPath);
            LOGGER.addHandler(fh);
            SimpleFormatter formatter = new SimpleFormatter();
            fh.setFormatter(formatter);
        } catch (Exception e) {
            System.err.println("Failed to open log file at '" + logPath + "'. Logging to console instead.");
        }
        LOGGER.info("Logger set up. App initialized.");
    }

    private static void closeLogger() {
        // TODO: remove lock for logger file.
    }

    private static void outputInstructions() {
        System.out.println("LottoApp usage: [command] [parameter1, parameter2, ...]");
        System.out.println("    commands: game, blacklist, exit");
        System.out.println("        game: 'game lotto' or  'game eurojackpot'");
        System.out.println(
                "        blacklist: 'blacklist add [number1, number2...]' or  'blacklist remove [number1, number2...]'");
    }
}
